# Generated from Arithmetic.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,22,113,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,
        1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,6,1,7,1,7,1,7,1,8,1,
        8,1,8,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,11,1,11,1,12,4,12,84,8,12,
        11,12,12,12,85,1,13,1,13,1,14,1,14,1,15,1,15,1,16,1,16,1,17,1,17,
        1,18,4,18,99,8,18,11,18,12,18,100,1,19,1,19,1,20,1,20,1,21,4,21,
        108,8,21,11,21,12,21,109,1,21,1,21,0,0,22,1,1,3,2,5,3,7,4,9,5,11,
        6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,
        35,18,37,19,39,20,41,21,43,22,1,0,3,2,0,65,90,97,122,1,0,48,57,3,
        0,9,10,13,13,32,32,115,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,
        0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,
        0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,
        0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,
        0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,1,45,1,0,0,0,3,50,1,
        0,0,0,5,56,1,0,0,0,7,58,1,0,0,0,9,60,1,0,0,0,11,62,1,0,0,0,13,64,
        1,0,0,0,15,67,1,0,0,0,17,70,1,0,0,0,19,73,1,0,0,0,21,78,1,0,0,0,
        23,80,1,0,0,0,25,83,1,0,0,0,27,87,1,0,0,0,29,89,1,0,0,0,31,91,1,
        0,0,0,33,93,1,0,0,0,35,95,1,0,0,0,37,98,1,0,0,0,39,102,1,0,0,0,41,
        104,1,0,0,0,43,107,1,0,0,0,45,46,5,116,0,0,46,47,5,114,0,0,47,48,
        5,117,0,0,48,49,5,101,0,0,49,2,1,0,0,0,50,51,5,102,0,0,51,52,5,97,
        0,0,52,53,5,108,0,0,53,54,5,115,0,0,54,55,5,101,0,0,55,4,1,0,0,0,
        56,57,5,38,0,0,57,6,1,0,0,0,58,59,5,124,0,0,59,8,1,0,0,0,60,61,5,
        62,0,0,61,10,1,0,0,0,62,63,5,60,0,0,63,12,1,0,0,0,64,65,5,61,0,0,
        65,66,5,61,0,0,66,14,1,0,0,0,67,68,5,33,0,0,68,69,5,61,0,0,69,16,
        1,0,0,0,70,71,5,105,0,0,71,72,5,102,0,0,72,18,1,0,0,0,73,74,5,101,
        0,0,74,75,5,108,0,0,75,76,5,115,0,0,76,77,5,101,0,0,77,20,1,0,0,
        0,78,79,5,123,0,0,79,22,1,0,0,0,80,81,5,125,0,0,81,24,1,0,0,0,82,
        84,7,0,0,0,83,82,1,0,0,0,84,85,1,0,0,0,85,83,1,0,0,0,85,86,1,0,0,
        0,86,26,1,0,0,0,87,88,5,61,0,0,88,28,1,0,0,0,89,90,5,43,0,0,90,30,
        1,0,0,0,91,92,5,45,0,0,92,32,1,0,0,0,93,94,5,42,0,0,94,34,1,0,0,
        0,95,96,5,47,0,0,96,36,1,0,0,0,97,99,7,1,0,0,98,97,1,0,0,0,99,100,
        1,0,0,0,100,98,1,0,0,0,100,101,1,0,0,0,101,38,1,0,0,0,102,103,5,
        40,0,0,103,40,1,0,0,0,104,105,5,41,0,0,105,42,1,0,0,0,106,108,7,
        2,0,0,107,106,1,0,0,0,108,109,1,0,0,0,109,107,1,0,0,0,109,110,1,
        0,0,0,110,111,1,0,0,0,111,112,6,21,0,0,112,44,1,0,0,0,4,0,85,100,
        109,1,6,0,0
    ]

class ArithmeticLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    TRUE = 1
    FALSE = 2
    AND = 3
    OR = 4
    GTHAN = 5
    LTHAN = 6
    EQUALS = 7
    NEQUALS = 8
    IF = 9
    ELSE = 10
    BEGIN = 11
    END = 12
    VAR = 13
    ASSIGN = 14
    PLUS = 15
    MINUS = 16
    MUL = 17
    DIV = 18
    INT = 19
    LPAREN = 20
    RPAREN = 21
    WS = 22

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'true'", "'false'", "'&'", "'|'", "'>'", "'<'", "'=='", "'!='", 
            "'if'", "'else'", "'{'", "'}'", "'='", "'+'", "'-'", "'*'", 
            "'/'", "'('", "')'" ]

    symbolicNames = [ "<INVALID>",
            "TRUE", "FALSE", "AND", "OR", "GTHAN", "LTHAN", "EQUALS", "NEQUALS", 
            "IF", "ELSE", "BEGIN", "END", "VAR", "ASSIGN", "PLUS", "MINUS", 
            "MUL", "DIV", "INT", "LPAREN", "RPAREN", "WS" ]

    ruleNames = [ "TRUE", "FALSE", "AND", "OR", "GTHAN", "LTHAN", "EQUALS", 
                  "NEQUALS", "IF", "ELSE", "BEGIN", "END", "VAR", "ASSIGN", 
                  "PLUS", "MINUS", "MUL", "DIV", "INT", "LPAREN", "RPAREN", 
                  "WS" ]

    grammarFileName = "Arithmetic.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


